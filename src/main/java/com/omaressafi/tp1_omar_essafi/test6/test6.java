package com.omaressafi.tp1_omar_essafi.test6;

import dev.langchain4j.model.chat.ChatModel;
import dev.langchain4j.model.googleai.GoogleAiGeminiChatModel;
import dev.langchain4j.service.AiServices;

/**
 * Test 6 : Utilisation d'un outil avec LangChain4j
 * L'outil permet au LLM d'obtenir la m√©t√©o en temps r√©el
 */
public class test6 {

    public static void main(String[] args) {
        // R√©cup√©ration de la cl√© API
        String cle = System.getenv("GEMINI_KEY");
        if (cle == null) {
            System.err.println("Erreur : La variable d'environnement GEMINI_API_KEY n'est pas d√©finie.");
            return;
        }

        System.out.println("Initialisation de l'assistant m√©t√©o...\n");

        // ‚úÖ Utilisation de ChatModel comme demand√©
        // ‚úÖ Ajout de logRequestsAndResponses(true) pour voir les JSON
        ChatModel chatModel = GoogleAiGeminiChatModel.builder()
                .apiKey(cle)
                .modelName("gemini-2.5-flash")
                .temperature(0.7)
                .logRequestsAndResponses(true)  // ‚≠ê Active le logging des JSON
                .build();

        System.out.println("Assistant m√©t√©o pr√™t !\n");
        System.out.println("=".repeat(70));

        // ========== Test 1: M√©t√©o d'une ville r√©elle ==========
        System.out.println("\n=== Test 1: M√©t√©o √† Paris ===");
        // ‚úÖ Cr√©er un assistant sans m√©moire pour √©viter les conflits
        AssistantMeteo assistant1 = AiServices.builder(AssistantMeteo.class)
                .chatModel(chatModel)
                .tools(new MeteoTool())
                // PAS de chatMemory pour √©viter l'erreur INVALID_ARGUMENT
                .build();

        String reponse1 = assistant1.chat("Quel temps fait-il √† Paris ?");
        System.out.println("R√©ponse: " + reponse1);
        System.out.println("=".repeat(70));

        // ========== Test 2: Ville inexistante ==========
        System.out.println("\n=== Test 2: Ville inexistante ===");
        AssistantMeteo assistant2 = AiServices.builder(AssistantMeteo.class)
                .chatModel(chatModel)
                .tools(new MeteoTool())
                .build();

        String reponse2 = assistant2.chat("Quel temps fait-il √† Zzzville ?");
        System.out.println("R√©ponse: " + reponse2);
        System.out.println("=".repeat(70));

        // ========== Test 3: Question sans rapport avec la m√©t√©o ==========
        System.out.println("\n=== Test 3: Question sans rapport avec m√©t√©o ===");
        AssistantMeteo assistant3 = AiServices.builder(AssistantMeteo.class)
                .chatModel(chatModel)
                .tools(new MeteoTool())
                .build();

        String reponse3 = assistant3.chat("Qui a √©crit Les Mis√©rables ?");
        System.out.println("R√©ponse: " + reponse3);
        System.out.println("=".repeat(70));

        // ========== Test 4: Question contextuelle sur la m√©t√©o ==========
        System.out.println("\n=== Test 4: Conseil parapluie ===");
        AssistantMeteo assistant4 = AiServices.builder(AssistantMeteo.class)
                .chatModel(chatModel)
                .tools(new MeteoTool())
                .build();

        String reponse4 = assistant4.chat("J'ai pr√©vu d'aller aujourd'hui √† Londres. Est-ce que tu me conseilles de prendre un parapluie ?");
        System.out.println("R√©ponse: " + reponse4);
        System.out.println("=".repeat(70));

        // ========== Test 5: Comparaison de plusieurs villes ==========
        System.out.println("\n=== Test 5: Comparaison m√©t√©o ===");
        AssistantMeteo assistant5 = AiServices.builder(AssistantMeteo.class)
                .chatModel(chatModel)
                .tools(new MeteoTool())
                .build();

        String reponse5 = assistant5.chat("Compare la m√©t√©o entre Casablanca et Paris");
        System.out.println("R√©ponse: " + reponse5);
        System.out.println("=".repeat(70));

        System.out.println("\n‚úÖ Tous les tests termin√©s !");
        System.out.println("\nüìä Analyse des logs JSON ci-dessus:");
        System.out.println("1. Cherchez 'tools.functionDeclarations' ‚Üí D√©claration de l'outil au LLM");
        System.out.println("2. Cherchez 'functionCall' ‚Üí Le LLM d√©cide d'utiliser l'outil");
        System.out.println("3. Cherchez 'functionResponse' ‚Üí R√©sultat retourn√© par l'outil");
        System.out.println("4. Cherchez le texte final ‚Üí R√©ponse reformul√©e par le LLM");
    }
}